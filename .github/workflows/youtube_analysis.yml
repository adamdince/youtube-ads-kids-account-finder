# .github/workflows/youtube_analysis.yml
name: YouTube Kids Channel Analysis

on:
  # Manual trigger from GitHub
  workflow_dispatch:
    inputs:
      run_description:
        description: 'Description of this analysis run'
        required: false
        default: 'Manual analysis run'
  
  # Scheduled runs (optional - runs every Monday at 9 AM UTC)
  schedule:
    - cron: '0 9 * * 1'
  
  # Trigger via repository dispatch (for Google Sheets integration)
  repository_dispatch:
    types: [run-youtube-analysis]

jobs:
  analyze-youtube-channels:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
    
    - name: Run YouTube analysis
      env:
        YOUTUBE_API_KEY: ${{ secrets.YOUTUBE_API_KEY }}
        GOOGLE_SHEETS_CREDENTIALS: ${{ secrets.GOOGLE_SHEETS_CREDENTIALS }}
        GOOGLE_SHEET_ID: ${{ secrets.GOOGLE_SHEET_ID }}
      run: |
        python main.py
    
    - name: Upload results as artifact
      uses: actions/upload-artifact@v3
      with:
        name: youtube-analysis-results
        path: results.json
        retention-days: 30

---

# requirements.txt
requests==2.31.0
gspread==5.12.0
google-auth==2.23.4
google-auth-oauthlib==1.1.0
google-auth-httplib2==0.1.1

---

# setup_sheets.py - Helper script to create the initial Google Sheets structure
import gspread
import json
import os
from google.oauth2.service_account import Credentials

def setup_google_sheet():
    """Create the initial Google Sheets structure"""
    
    # Setup credentials (run this locally first)
    service_account_file = 'path/to/your/service-account-key.json'  # Update this path
    
    scopes = [
        'https://www.googleapis.com/auth/spreadsheets',
        'https://www.googleapis.com/auth/drive'
    ]
    
    credentials = Credentials.from_service_account_file(service_account_file, scopes=scopes)
    gc = gspread.authorize(credentials)
    
    # Create new spreadsheet
    spreadsheet = gc.create('YouTube Kids Channel Analysis')
    spreadsheet.share('your-email@gmail.com', perm_type='user', role='owner')  # Update with your email
    
    print(f"Created spreadsheet: {spreadsheet.url}")
    print(f"Spreadsheet ID: {spreadsheet.id}")
    
    # Create Config worksheet
    config_sheet = spreadsheet.sheet1
    config_sheet.update_title('Config')
    
    config_headers = [
        ['Setting', 'Value', '', 'Summary', 'Value'],
        ['max_results_per_term', '50', '', 'Last Run', ''],
        ['min_kids_score', '3', '', 'Total Channels Found', ''],
        ['', '', '', 'Kids Channels Found', ''],
        ['', '', '', 'Search Terms Used', '']
    ]
    config_sheet.update('A1', config_headers)
    
    # Create Search Terms worksheet
    search_sheet = spreadsheet.add_worksheet(title='Search Terms', rows=100, cols=3)
    search_terms_data = [
        ['Search Term', 'Description', 'Active'],
        ['kids', 'General kids content', 'TRUE'],
        ['children', 'General children content', 'TRUE'],
        ['nursery rhymes', 'Songs for young children', 'TRUE'],
        ['toy review', 'Toy unboxing and reviews', 'TRUE'],
        ['educational kids', 'Educational content for children', 'TRUE'],
        ['cartoon for kids', 'Animated content for children', 'TRUE'],
        ['baby songs', 'Songs for babies and toddlers', 'TRUE'],
        ['cocomelon', 'Popular kids channel brand', 'FALSE'],
        ['blippi', 'Popular kids educational character', 'FALSE'],
        ['peppa pig', 'Popular kids cartoon character', 'FALSE']
    ]
    search_sheet.update('A1', search_terms_data)
    
    # Create Results worksheet (will be populated by the script)
    results_sheet = spreadsheet.add_worksheet(title='Results', rows=1000, cols=10)
    results_headers = [
        'Channel ID', 'Channel Title', 'Channel URL', 'Subscriber Count',
        'Video Count', 'Kids Score', 'Matched Keywords', 'Likely Kids Content',
        'Analysis Date'
    ]
    results_sheet.update('A1', [results_headers])
    
    # Create Instructions worksheet
    instructions_sheet = spreadsheet.add_worksheet(title='Instructions', rows=50, cols=2)
    instructions_data = [
        ['YouTube Kids Channel Analysis Tool', ''],
        ['', ''],
        ['How to use:', ''],
        ['1. Configure Settings', 'Edit the Config sheet to set analysis parameters'],
        ['2. Add Search Terms', 'Add or modify search terms in the Search Terms sheet'],
        ['3. Trigger Analysis', 'Use the trigger URL or run manually from GitHub'],
        ['4. View Results', 'Check the Results sheet for analysis output'],
        ['', ''],
        ['Settings Explanation:', ''],
        ['max_results_per_term', 'Maximum channels to find per search term (API quota limit)'],
        ['min_kids_score', 'Minimum score to include channel in results (3+ recommended)'],
        ['', ''],
        ['GitHub Repository:', 'https://github.com/your-username/youtube-kids-analyzer'],
        ['Trigger Analysis:', 'Run from GitHub Actions or use webhook URL'],
        ['', ''],
        ['Score Meaning:', ''],
        ['0-2', 'Unlikely to be kids content'],
        ['3-5', 'Possibly kids content'],
        ['6+', 'Very likely kids content']
    ]
    instructions_sheet.update('A1', instructions_data)
    
    return spreadsheet.id

if __name__ == "__main__":
    sheet_id = setup_google_sheet()
    print(f"\nSheet ID for GitHub secrets: {sheet_id}")

---

# google_apps_script.js - Add this to Google Apps Script to trigger from Sheets
function onOpen() {
  var ui = SpreadsheetApp.getUi();
  ui.createMenu('YouTube Analysis')
    .addItem('Run Analysis', 'triggerGitHubAction')
    .addItem('Check Status', 'checkAnalysisStatus')
    .addToUi();
}

function triggerGitHubAction() {
  // GitHub repository details
  var githubUsername = 'YOUR_GITHUB_USERNAME';  // Update this
  var repoName = 'youtube-kids-analyzer';  // Update this
  var githubToken = 'YOUR_GITHUB_TOKEN';  // Store in Script Properties for security
  
  // Get token from Script Properties (more secure)
  githubToken = PropertiesService.getScriptProperties().getProperty('GITHUB_TOKEN');
  
  if (!githubToken) {
    SpreadsheetApp.getUi().alert('GitHub token not configured. Add GITHUB_TOKEN to Script Properties.');
    return;
  }
  
  var url = `https://api.github.com/repos/${githubUsername}/${repoName}/dispatches`;
  
  var payload = {
    'event_type': 'run-youtube-analysis',
    'client_payload': {
      'triggered_from': 'google_sheets',
      'timestamp': new Date().toISOString(),
      'sheet_id': SpreadsheetApp.getActiveSpreadsheet().getId()
    }
  };
  
  var options = {
    'method': 'POST',
    'headers': {
      'Authorization': 'token ' + githubToken,
      'Accept': 'application/vnd.github.v3+json',
      'Content-Type': 'application/json'
    },
    'payload': JSON.stringify(payload)
  };
  
  try {
    var response = UrlFetchApp.fetch(url, options);
    
    if (response.getResponseCode() === 204) {
      SpreadsheetApp.getUi().alert('Analysis started! Check GitHub Actions for progress.');
      
      // Update config sheet with trigger time
      var sheet = SpreadsheetApp.getActiveSpreadsheet().getSheetByName('Config');
      sheet.getRange('E1').setValue('Last Triggered');
      sheet.getRange('E2').setValue(new Date());
    } else {
      SpreadsheetApp.getUi().alert('Error triggering analysis: ' + response.getContentText());
    }
  } catch (error) {
    SpreadsheetApp.getUi().alert('Error: ' + error.toString());
  }
}

function checkAnalysisStatus() {
  var githubUsername = 'YOUR_GITHUB_USERNAME';  // Update this
  var repoName = 'youtube-kids-analyzer';  // Update this
  var githubToken = PropertiesService.getScriptProperties().getProperty('GITHUB_TOKEN');
  
  if (!githubToken) {
    SpreadsheetApp.getUi().alert('GitHub token not configured.');
    return;
  }
  
  var url = `https://api.github.com/repos/${githubUsername}/${repoName}/actions/runs?per_page=5`;
  
  var options = {
    'method': 'GET',
    'headers': {
      'Authorization': 'token ' + githubToken,
      'Accept': 'application/vnd.github.v3+json'
    }
  };
  
  try {
    var response = UrlFetchApp.fetch(url, options);
    var data = JSON.parse(response.getContentText());
    
    if (data.workflow_runs && data.workflow_runs.length > 0) {
      var latestRun = data.workflow_runs[0];
      var status = latestRun.status;
      var conclusion = latestRun.conclusion;
      var createdAt = new Date(latestRun.created_at);
      
      var message = `Latest run status: ${status}`;
      if (conclusion) {
        message += ` (${conclusion})`;
      }
      message += `\nStarted: ${createdAt.toLocaleString()}`;
      
      SpreadsheetApp.getUi().alert(message);
    } else {
      SpreadsheetApp.getUi().alert('No recent runs found.');
    }
  } catch (error) {
    SpreadsheetApp.getUi().alert('Error checking status: ' + error.toString());
  }
}
